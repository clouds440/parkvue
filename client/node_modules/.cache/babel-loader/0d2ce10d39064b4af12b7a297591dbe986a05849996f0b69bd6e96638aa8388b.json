{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cooki\\\\OneDrive - CUNY\\\\Desktop\\\\parkvue2.0\\\\parkvue\\\\client\\\\src\\\\context\\\\ContextProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n//Context provider switches between the looked user and the looked out user (User exist versus not)\nimport { createContext, useContext, useReducer } from 'react';\nimport reducer from './reducer';\n\n//Engine state: Initial state contains all our public values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  currentUser: null\n};\n\n//when initial state is passed\nconst Context = /*#__PURE__*/createContext(initialState); //Hook to extract the values of the context easily\n\nexport const useValue = () => {\n  _s();\n  return useContext(Context);\n};\n\n//context provider\n_s(useValue, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst ContextProvider = ({\n  children\n}) => {\n  _s2();\n  //extract state and then dispatch from use reducer\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    /*#__PURE__*/\n    // Current state and the dispatcher of that state inside the values => Reducer\n    _jsxDEV(Context.Provider, {\n      value: {\n        state,\n        dispatch\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 10\n    }, this)\n  );\n};\n_s2(ContextProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ContextProvider;\nexport default ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useContext","useReducer","reducer","jsxDEV","_jsxDEV","initialState","currentUser","Context","useValue","_s","ContextProvider","children","_s2","state","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/cooki/OneDrive - CUNY/Desktop/parkvue2.0/parkvue/client/src/context/ContextProvider.js"],"sourcesContent":["//Context provider switches between the looked user and the looked out user (User exist versus not)\r\nimport {createContext, useContext, useReducer } from 'react';\r\nimport reducer from './reducer';\r\n\r\n//Engine state: Initial state contains all our public values\r\nconst initialState = {\r\n    currentUser: null,\r\n};\r\n\r\n//when initial state is passed\r\nconst Context = createContext(initialState); //Hook to extract the values of the context easily\r\n\r\nexport const useValue = () => {\r\n    return useContext(Context);\r\n};\r\n\r\n//context provider\r\nconst ContextProvider = ({ children }) => { //extract state and then dispatch from use reducer\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    return (\r\n        // Current state and the dispatcher of that state inside the values => Reducer\r\n         <Context.Provider value = {{state, dispatch}}\r\n         >\r\n            {/*Now all variables inside the state will be available to all components wrapped by this provider*/}\r\n            {children}\r\n        </Context.Provider>\r\n    );\r\n}\r\n\r\nexport default ContextProvider;"],"mappings":";;;AAAA;AACA,SAAQA,aAAa,EAAEC,UAAU,EAAEC,UAAU,QAAQ,OAAO;AAC5D,OAAOC,OAAO,MAAM,WAAW;;AAE/B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,OAAO,gBAAGR,aAAa,CAACM,YAAY,CAAC,CAAC,CAAC;;AAE7C,OAAO,MAAMG,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,OAAOT,UAAU,CAACO,OAAO,CAAC;AAC9B,CAAC;;AAED;AAAAE,EAAA,CAJaD,QAAQ;AAKrB,MAAME,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAAE;EACxC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,UAAU,CAACC,OAAO,EAAEG,YAAY,CAAC;EAC3D;IAAA;IACI;IACCD,OAAA,CAACG,OAAO,CAACQ,QAAQ;MAACC,KAAK,EAAI;QAACH,KAAK;QAAEC;MAAQ,CAAE;MAAAH,QAAA,EAGzCA;IAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC;AAE3B,CAAC;AAAAR,GAAA,CAVKF,eAAe;AAAAW,EAAA,GAAfX,eAAe;AAYrB,eAAeA,eAAe;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}